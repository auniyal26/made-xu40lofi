pipeline GoodsByTrainPipeline {

	GoodsByTrainExtractor
		-> GoodsByTrainTextFileInterpreter
		-> GoodsByTrainCSVInterpreter
		-> DeleteMetaDataRows
		-> DeleteColumns
		-> AddHeader
		-> RenameHeader
	   	-> GoodsByTrainTableInterpreter
		-> GoodsByTrainLoader;

	block GoodsByTrainExtractor oftype HttpExtractor {
		url: "https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
	}

	block GoodsByTrainTextFileInterpreter oftype TextFileInterpreter {
		encoding: "latin4";
	}

	block GoodsByTrainCSVInterpreter oftype CSVInterpreter {
		delimiter: ";";
	}
	
	block DeleteMetaDataRows oftype RowDeleter {
		delete: [
			row 0,
			row 1,
			row 2,
			row 3,
			row 4,
			row 5,
			row 6,
			row 7,
		];
	}

	block DeleteColumns oftype ColumnDeleter {
		delete: [
			column F,
			column G,
			column H,
			column I,
			column J,
			column K,
			column L,
			column M,
			column N,
			column O,
			column P,
			column Q,
			column R,
			column S,
			column T,
			column U,
			column V,
			column W,
			column X,
			column Y,
			column Z,
			column AA,
			column AB,
			column AC,
			column AD,
			column AE,
			column AF,
			column AG,
			column AH,
			column AI,
			column AJ,
			column AK,
			column AL,
			column AM,
			column AN,
			column AO,
			column AP,
			column AQ,
			column AR,
			column AS
		];
	}	

	block AddHeader oftype CellWriter {
		at: range A1:E1;
		write: ['year', 'month', 'goods_id', 'goods_name', 'goods_source'];
	}
	
	block RenameHeader oftype CellWriter {
		at: range F1:G1;
		write: ['abroad', 'total'];
	}

	block GoodsByTrainTableInterpreter oftype TableInterpreter {
		header: true;
		columns: [
			"year" oftype PositiveInteger,
			"month" oftype ValidMonth,
			"goods_id" oftype UID,
			"goods_name" oftype text,
			"goods_source" oftype text,
			"abroad" oftype PositiveInteger,
			"total" oftype PositiveInteger,
		];
	}

	valuetype PositiveInteger oftype integer {
		constraints: [ Positive ];
	}
	constraint Positive oftype RangeConstraint {
		lowerBound: 0;
	}

	valuetype ValidMonth oftype text {
		constraints: [ AllowedMonths ];
	}

	constraint AllowedMonths oftype AllowlistConstraint {
		allowlist: ["Januar", "Februar", "MÃ¤rz", "April", "Mai", "Juni", "July", "August", "September", "Oktober", "November", "Dezember"];
	}

	// 'goods_id' must start with NST7-, followed by three numbers or capital letters
	valuetype UID oftype text {
		constraints: [ ValidID ];
	}
	constraint ValidID oftype RegexConstraint {
		regex: /^NST7-[A-Z0-9]{3}$/;
	}

	block GoodsByTrainLoader oftype SQLiteLoader {
		table: "goods";
		file: "./goodsTransportedByTrain.sqlite";
	}
}